<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title data-i18n="title"></title>
    <meta name="description" content="A demo of Stripe Payment Intents" />

    <link rel="stylesheet" href="css/normalize.css" />
    <link rel="stylesheet" href="css/global.css" />
    <!-- Load Stripe.js on your website. -->
    <script src="https://js.stripe.com/v3/"></script>
    <script src="./script.js" defer></script>
    <!-- Load translation files and libraries. -->
    <script src="https://unpkg.com/i18next/i18next.js"></script>
    <script src="https://unpkg.com/i18next-xhr-backend/i18nextXHRBackend.js"></script>
    <script src="https://unpkg.com/i18next-browser-languagedetector/i18nextBrowserLanguageDetector.js"></script>
    <script src="./translation.js" defer></script>
  </head>

  <body>
    <div class="sr-root">
      <div class="sr-main">
        <header class="sr-header">
         
        </header>
        <section class="container">
          <div>
            <h1>CheckList Report</h1>
            <h4>Your file will be downloaded automatically after purchasing</h4>
            <div class="pasha-image">
              <img
                src="img/jumbotron.png"
                width="140"
                height="160"
              />
            </div>
          </div>
          <div class="quantity-setter">
            <button class="increment-btn" id="subtract" disabled>
              -
            </button>
            <input type="number" id="quantity-input" min="1" value="1" />
            <button class="increment-btn" id="add">+</button>
          </div>
          <p class="sr-legal-text" data-i18n="sr-legal-text"></p>

          <button
            id="submit"
            data-i18n="button.submit"
            i18n-options='{ "total": "0" }'
          ></button>
        </section>
        <div id="error-message"></div>
      </div>
    </div>
  </body>
  <script>
var MIN_PHOTOS = 1;
var MAX_PHOTOS = 10;

var basicPhotoButton = document.getElementById('basic-photo-button');
document
  .getElementById('quantity-input')
  .addEventListener('change', function (evt) {
    // Ensure customers only buy between 1 and 10 photos
    if (evt.target.value < MIN_PHOTOS) {
      evt.target.value = MIN_PHOTOS;
    }
    if (evt.target.value > MAX_PHOTOS) {
      evt.target.value = MAX_PHOTOS;
    }
  });

/* Method for changing the product quantity when a customer clicks the increment / decrement buttons */
var updateQuantity = function (evt) {
  if (evt && evt.type === 'keypress' && evt.keyCode !== 13) {
    return;
  }

  var isAdding = evt && evt.target.id === 'add';
  var inputEl = document.getElementById('quantity-input');
  var currentQuantity = parseInt(inputEl.value);

  document.getElementById('add').disabled = false;
  document.getElementById('subtract').disabled = false;

  // Calculate new quantity
  var quantity = evt
    ? isAdding
      ? currentQuantity + 1
      : currentQuantity - 1
    : currentQuantity;
  // Update number input with new value.
  inputEl.value = quantity;
  // Calculate the total amount and format it with currency symbol.
  var amount = config.unitAmount;
  var numberFormat = new Intl.NumberFormat(i18next.language, {
    style: 'currency',
    currency: config.currency,
    currencyDisplay: 'symbol',
  });
  var parts = numberFormat.formatToParts(amount);
  var zeroDecimalCurrency = true;
  for (var part of parts) {
    if (part.type === 'decimal') {
      zeroDecimalCurrency = false;
    }
  }
  amount = zeroDecimalCurrency ? amount : amount / 100;
  var total = (quantity * amount).toFixed(2);
  var formattedTotal = numberFormat.format(total);

  document
    .getElementById('submit')
    .setAttribute('i18n-options', `{ "total": "${formattedTotal}" }`);
  updateContent('button.submit');

  // Disable the button if the customers hits the max or min
  if (quantity === MIN_PHOTOS) {
    document.getElementById('subtract').disabled = true;
  }
  if (quantity === MAX_PHOTOS) {
    document.getElementById('add').disabled = true;
  }
};

/* Attach method */
Array.from(document.getElementsByClassName('increment-btn')).forEach(
  (element) => {
    element.addEventListener('click', updateQuantity);
  }
);

/* Handle any errors returns from Checkout  */
var handleResult = function (result) {
  if (result.error) {
    var displayError = document.getElementById('error-message');
    displayError.textContent = result.error.message;
  }
};

// Create a Checkout Session with the selected quantity
var createCheckoutSession = function () {
  var inputEl = document.getElementById('quantity-input');
  var quantity = parseInt(inputEl.value);

  return fetch('/create-checkout-session', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      quantity: quantity,
      locale: i18next.language.toLowerCase().split('-')[0],
    }),
  }).then(function (result) {
    return result.json();
  });
};

/* Get your Stripe publishable key to initialize Stripe.js */
fetch('/config')
  .then(function (result) {
    return result.json();
  })
  .then(function (json) {
    window.config = json;
    var stripe = Stripe(config.publicKey);
    updateQuantity();
    // Setup event handler to create a Checkout Session on submit
    document.querySelector('#submit').addEventListener('click', function (evt) {
      createCheckoutSession().then(function (data) {
        stripe
          .redirectToCheckout({
            sessionId: data.sessionId,
          })
          .then(handleResult);
      });
    });
  });

  </script>
</html>
